{"version":3,"sources":["components/Card.js","components/NewCardForm.js","components/Board.js","components/Header.js","App.js","registerServiceWorker.js","index.js"],"names":["Card","handleSubmit","event","preventDefault","_this","props","deleteCardCallback","id","displayText","displayEmoji","this","text","react_default","a","createElement","className","emoji","getUnicode","onSubmit","type","Component","EMOJI_LIST","NewCardForm","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","renderEmoji","map","emojiOption","index","key","value","onFieldChange","fieldName","target","name","fieldValue","updateState","setState","clearForm","onFormSubmit","addCardCallback","state","htmlFor","onChange","Board","addCard","card","axios","post","then","response","componentDidMount","catch","error","message","deleteCard","delete","concat","renderCards","cards","data","src_components_Card","_this2","get","errorMessage","src_components_NewCardForm","withLDConsumer","_ref","header","flags","newHeader","App","components_Header","src_components_Board","withLDProvider","clientSideID","user","email","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.a24b215c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport emoji from 'emoji-dictionary';\n\nimport './Card.css';\n\nclass Card extends Component {\n  handleSubmit = (event) => {\n    event.preventDefault();\n\n    this.props.deleteCardCallback(this.props.id);\n  }\n\n  render() {\n    let displayText;\n    let displayEmoji;\n\n    if (this.props.text) {\n      displayText = <h3 className=\"card__content-text\">{this.props.text}</h3>;\n    }\n\n    if (this.props.emoji) {\n      displayEmoji = <p className=\"card__content-emoji\">{emoji.getUnicode(this.props.emoji)}</p>;\n    }\n\n\n    return (\n      <div className=\"card\">\n        <article className=\"card__content\">\n          {displayText}\n          {displayEmoji}\n        </article>\n        <form className=\"card__delete\" onSubmit={this.handleSubmit}>\n          <button className=\"button\" type=\"submit\">x</button>\n        </form>\n      </div>\n    )\n  }\n}\n\nCard.propTypes = {\n  text: PropTypes.string,\n  emoji: PropTypes.string,\n  id: PropTypes.number,\n  deleteCardCallback: PropTypes.func,\n};\n\nexport default Card;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport emoji from 'emoji-dictionary';\nimport './NewCardForm.css';\n\nconst EMOJI_LIST = [\"\", \"heart_eyes\", \"heart\", \"clap\", \"sparkling_heart\", \"heart_eyes_cat\", \"dog\", \"100\", \"rose\", \"smile\", \"rainbow\", \"earth_americas\", \"sunflower\", \"unicorn\"]\n\nclass NewCardForm extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      text: '',\n      emoji: '',\n    };\n  }\n\n  renderEmoji= () => {\n    const emojiList = EMOJI_LIST.map((emojiOption, index) => {\n      return(\n        <option\n          key={index} value={emojiOption}>{emoji.getUnicode(emojiOption)}\n        </option>\n      );\n    });\n    return emojiList\n  }\n\n  onFieldChange = (event) => {\n    const fieldName = event.target.name;\n    const fieldValue = event.target.value;\n    const updateState = {};\n    updateState[fieldName] = fieldValue;\n    this.setState(updateState);\n  }\n\n  clearForm = () => {\n    this.setState({\n      text: '',\n      emoji: '',\n    });\n  }\n\n  onFormSubmit = (event) => {\n    event.preventDefault();\n\n    this.props.addCardCallback(this.state);\n\n    this.clearForm();\n  }\n\n  render() {\n    return (\n      <div className=\"new-card-form\">\n        <h3 className=\"new-card-form__header\">Add a New Inspiration</h3>\n          <form className=\"new-card-form__form\" onSubmit={this.onFormSubmit}>\n            <label className=\"new-card-form__form-label\" htmlFor=\"text\">Text: </label>\n            <input className=\"new-card-form__form-textarea\" name=\"text\" value={this.state.text}\n            onChange={this.onFieldChange} type=\"text\"\n            />\n\n            <label className=\"new-card-form__form-label\" htmlFor=\"emoji\">Emoji: </label>\n            <select className=\"new-card-form__form-select\" value={this.state.emoji} name='emoji' onChange={this.onFieldChange}>\n              {this.renderEmoji()}\n            </select>\n\n            <input className=\"new-card-form__form-button\" type=\"submit\" value=\"Add Card\" />\n          </form>\n      </div>\n    )\n  }\n}\n\nexport default NewCardForm;\n\nNewCardForm.propTypes = {\n  addCardCallback: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\n// import PropTypes from 'prop-types';\nimport axios from 'axios';\n\nimport './Board.css';\nimport Card from './Card';\nimport NewCardForm from './NewCardForm';\n\nclass Board extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      cards: [],\n    };\n  }\n\n  componentDidMount() {\n    axios.get('https://bradlies-board-api.herokuapp.com//boards/bradliepond/cards')\n    .then((response) => {\n      this.setState({ cards: response.data });\n    })\n    .catch((error) => {\n      this.setState({\n        error: error.message\n      })\n    });\n  }\n\n  addCard = (card) => {\n    // const cards = this.state.cards;\n\n    axios.post('https://bradlies-board-api.herokuapp.com//boards/bradliepond/cards', card)\n    .then((response) => {\n    this.componentDidMount();\n    })\n    .catch((error) => {\n      this.setState({\n        error: error.message\n      })\n    })\n  }\n\n\n  deleteCard = (id) => {\n    axios.delete(`https://bradlies-board-api.herokuapp.com//boards/bradliepond/cards/${id}`)\n    .then((response) => {\n      this.setState({\n        message: 'Successfully Deleted Card'\n      });\n      this.componentDidMount();\n      // this.componentWillUnmount(); // <---  Is this something I should be using instead\n    })\n    .catch((error) => {\n      this.setState({\n        error: error.message\n      })\n    });\n  }\n\n  renderCards = () => {\n    const cardList = this.state.cards.map((data,index) => {\n      return (\n        <Card\n          key={index}\n          text={data.card.text}\n          emoji={data.card.emoji}\n          id={data.card.id}\n          deleteCardCallback={this.deleteCard}\n        />\n      );\n    });\n    return cardList\n  }\n\n  render() {\n    let errorMessage\n\n    if (this.state.error) {\n      errorMessage = <p>{this.state.error}</p>\n    }\n\n    let message\n\n    if (this.state.message) {\n      message = <p>{this.state.message}</p>\n    }\n    return (\n      <div className=\"board\">\n        {this.renderCards()}\n        {errorMessage}\n        {message}\n        <NewCardForm addCardCallback={this.addCard} />\n      </div>\n    )\n  }\n}\n\nBoard.propTypes = {\n\n};\n\nexport default Board;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withLDConsumer } from 'launchdarkly-react-client-sdk';\n\nconst Header = ({ flags }) => {\n\n  let header;\n\n  // if true -> show new content\n  //if false -> show orginal content\n  \n  if(flags.newHeader){\n    header =\n    <header className=\"header\">\n      <h1 className=\"header__h1\">\n        <span className=\"header__text purple\">An Inspiration Board for An Amazing Person</span>\n      </h1>\n    </header>;\n  }\n  else {\n    header =\n    <header className=\"header\">\n      <h1 className=\"header__h1\">\n        <span className=\"header__text\">An Inspiration Board for Bradlie</span>\n      </h1>\n    </header>;\n  }\n\n  return (\n    <div className=\"header\">\n      {header}\n    </div>\n  )\n}\n\nHeader.propTypes = {\n  flags: PropTypes.object,\n};\n\nexport default withLDConsumer()(Header);\n","import React, { Component } from 'react';\nimport './App.css';\nimport Board from './components/Board';\nimport Header from './components/Header';\nimport { withLDProvider } from 'launchdarkly-react-client-sdk';\n\nclass App extends Component {\n  render() {\n    return (\n      <section>\n        <Header />\n        <Board />\n      </section>\n    );\n  }\n}\n\nexport default withLDProvider({\n  clientSideID: '5d5ca6077fcabc08797c4789',\n  user: {\n      \"key\": \"user_key\",\n      \"name\": \"User Name\",\n      \"email\": \"User@email.com\"\n  }\n})(App);\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}